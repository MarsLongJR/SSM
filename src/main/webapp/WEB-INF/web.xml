<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
          http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">

    <display-name>testSSM</display-name>
    
    <!--加载spring-mybatis.xml，默认加载文件名为applicationContext,xml-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:spring-mybatis.xml</param-value>
    </context-param>
    #加载log4j.properties配置文件
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <!--Spring中的监听器：监听器的作用是实现某个接口的特定java程序。这个程序专门用来监听另外一个java对象属性的改变
    #和该对象的方法的调用。一旦属性改变，方法被调用。监听器的某个方法会被调用和执行。
    #过程：被监听对象-》被对象拥有的事件-》监听器监听到事件的发生-》监听器处理事件-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--防止spring内存溢出的监听器-->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!-- 编码过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--spring MVC的servlet-->
    <servlet>
        <servlet-name>testSSM</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
            <async-supported>true</async-supported>
    </servlet>
        <servlet-mapping>
            <servlet-name>testSSM</servlet-name>
            <!--当我们在浏览器的地址栏里输入http://localhost:8080/testSSM/*时[假设我部署在webapps目录下的项目名为test]
            就会匹配到我们指定的<url-pattern>中，即/i*然后一步一步找到对应的<servlet-class>
            首先我们要知道URL的组成
            http://localhost:8080    我们可以理解为是我们的服务器地址
            而该地址之后的部分我们统称为：RequestURI,RequestURI是我们需要重点注意的部分
            其又可以分解为几部分:/testSSM是我们ServletContext的上下文地址，我们称为ServletContext Path
            /*  是我们的Servlet的地址，我们称为Servlet Path，这里就是需要与我们的<url-pattern>匹配的内容

            注意：我们可以通过使用<url-pattern>*.do</url-pattern>来过滤请求，这样如果我们在页面中的请求中添加后缀名.do就可以避免对静态资源的过滤了，也就不需要对静态资源做特殊处理了
            -->
            <!---->
            <url-pattern>/*</url-pattern>
        </servlet-mapping>

    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <!--session配置-->
    <session-config>
        <session-timeout>15</session-timeout>
    </session-config>

</web-app>