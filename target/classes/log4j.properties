log4j.rootLogger=INFO,Console,File

#Console
log4j.appender.Console=org.apache.log4j.ConsoleAppender
#日志排版【org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）】
#Layout 负责格式化Appender的输出。
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
#日志对话排版格式【如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：
#%m 输出代码中指定的消息；
#%M 输出打印该条日志的方法名；
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#%r 输出自应用启动到输出该log信息耗费的毫秒数；
#%c 输出所属的类目，通常就是所在类的全名；
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#%l 输出日志事件的发生位置，及在代码中的行数；
#[QC]是log信息的开头，可以为任意字符，一般为项目简称。
#输出的信息
#[TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean 'MyAutoProxy'】
log4j.appender.Console.ConversationLayout=[%p][%t][%d{yyyy-MM-dd HH\:mm\:ss}][%C] - %m%n

#File
log4j.appender.File=org.apache.log4j.RollingFileAppender
log4j.appender.File.File=logs/ssm.log
log4j.appender.File.MaxFileSize=10MB


#输出日志，如果换成DEBUG表示输出DEBUG以上级别日志
log4j.appender.File.Threshold=ALL  
log4j.appender.File.layout=org.apache.log4j.PatternLayout  
log4j.appender.File.layout.ConversionPattern=[%p][%t][%d{yyyy-MM-dd HH\:mm\:ss}][%C] - %m%n
